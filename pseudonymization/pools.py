# pseudonymization/pools.py
"""
데이터풀 관리 모듈 (전국 시/구 데이터 완전 추가)
- 전국 모든 시/도, 시, 구/군 포함
- 실명 목록 강화
- 가명 풀 추가
"""

import os
import csv
import random
from typing import List, Set

# ===== 제외 단어 리스트 (대폭 확장) =====
NAME_EXCLUDE_WORDS = {
    # 기존 문법 요소들
    "이름은", "이고", "이며", "라고", "이라고", "해요", "합니다", "예요", "이에요",
    "으로", "로", "에서", "에게", "에게서", "한테", "께", "께서", "까지", "부터",
    "는", "은", "이", "가", "을", "를", "의", "도", "만", "조차", "마저", "라도",
    
    # 지역명들 (시/도)
    "서울", "부산", "대구", "인천", "광주", "대전", "울산", "세종",
    "경기", "강원", "충북", "충남", "전북", "전남", "경북", "경남", "제주",
    "서울시", "부산시", "대구시", "인천시", "광주시", "대전시", "울산시", "세종시",
    "경기도", "강원도", "충청북도", "충청남도", "전라북도", "전라남도", "경상북도", "경상남도", "제주도",
    
    # 구/군들 (주요 지역)
    "강남구", "강동구", "강북구", "강서구", "관악구", "광진구", "구로구", "금천구",
    "노원구", "도봉구", "동대문구", "동작구", "마포구", "서대문구", "서초구", "성동구",
    "성북구", "송파구", "양천구", "영등포구", "용산구", "은평구", "종로구", "중구", "중랑구",
    
    # 부산 구/군
    "중구", "서구", "동구", "영도구", "부산진구", "동래구", "남구", "북구",
    "해운대구", "사하구", "금정구", "강서구", "연제구", "수영구", "사상구", "기장군",
    
    # 일반 명사들
    "사람", "학생", "선생", "교수", "의사", "간호사", "회사원", "직장인", "학부모",
    "아이", "어른", "남자", "여자", "친구", "동료", "선배", "후배", "형", "누나", "언니", "동생",
    "아버지", "어머니", "할아버지", "할머니", "부모", "가족", "형제", "자매",
    "회사", "학교", "병원", "은행", "마트", "상점", "식당", "카페", "영화관", "도서관",
    "집", "방", "거실", "주방", "화장실", "침실", "옥상", "지하실",
    
    # 시간 관련
    "오늘", "어제", "내일", "모레", "그제", "작년", "올해", "내년", "지난주", "다음주",
    "아침", "점심", "저녁", "밤", "새벽", "오전", "오후", "정오", "자정",
    "월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일",
    
    # 감정/상태 표현
    "기쁘", "슬프", "화나", "짜증", "즐거", "행복", "우울", "걱정", "불안", "안심",
    "좋아", "싫어", "사랑", "미워", "그리워", "보고싶", "고마워", "미안", "죄송",
    
    # 동작/행위
    "가다", "오다", "보다", "듣다", "먹다", "마시다", "자다", "일어나다", "씻다", "입다",
    "공부하다", "일하다", "놀다", "쉬다", "운동하다", "걷다", "뛰다", "달리다",
    "만나다", "헤어지다", "사귀다", "결혼하다", "이혼하다", "출산하다",
    "거주하시", "살고있", "분이시", "계시", "있으시", "하시", "드리", "받으", "보내",
    "주세요", "주시", "해주", "드세요", "하세요", "오세요", "가세요", "보세요",
    
    # 의문사/지시어
    "누구", "무엇", "언제", "어디", "어떻게", "왜", "얼마", "몇",
    "이것", "그것", "저것", "여기", "거기", "저기", "이곳", "그곳", "저곳",
    
    # 수량/정도
    "하나", "둘", "셋", "넷", "다섯", "여섯", "일곱", "여덟", "아홉", "열",
    "많이", "조금", "약간", "완전", "정말", "진짜", "가장", "제일", "더", "덜",
    
    # 접속사/부사
    "그리고", "하지만", "그러나", "또한", "또", "역시", "물론", "당연히", "아마",
    "혹시", "만약", "비록", "설령", "심지어", "특히", "단지", "오직", "절대",
}

# ===== 성씨 데이터 =====
COMPOUND_SURNAMES = [
    "남궁", "독고", "동방", "망절", "사공", "서문", "선우", "소봉", "어금", "장곡", "제갈", "황보"
]

SINGLE_SURNAMES = [
    "김", "이", "박", "최", "정", "강", "조", "윤", "장", "임", "한", "오", "서", "신", "권", "황", "안",
    "송", "류", "전", "홍", "고", "문", "양", "손", "배", "조", "백", "허", "유", "남", "심", "노", "정",
    "하", "곽", "성", "차", "주", "우", "구", "신", "임", "나", "전", "민", "유", "진", "지", "엄", "채",
    "원", "천", "방", "공", "강", "현", "함", "변", "염", "양", "변", "여", "추", "노", "도", "소", "신",
    "석", "선", "설", "마", "길", "주", "연", "방", "위", "표", "명", "기", "반", "왕", "금", "옥", "육",
    "인", "맹", "제", "모", "장", "남", "탁", "국", "여", "진", "어", "은", "편", "구", "용"
]

class DataPools:
    """데이터풀 관리 클래스"""
    
    def __init__(self):
        # 기본 데이터
        self.real_names = set()
        self.fake_names = []
        self.fake_phones = []
        self.fake_emails = []
        self.fake_addresses = []
        
        # 지역 데이터 (전국 완전 커버)
        self.provinces = []  # 시/도
        self.cities = []     # 시
        self.districts = []  # 구/군
        
        # 초기화
        self._load_default_data()
    
    def _load_default_data(self):
        """기본 데이터 로드"""
        
        # 실명 목록 (확실한 이름들만)
        self.real_names = {
            # 남성 이름들
            "민준", "서준", "도윤", "예준", "시우", "주원", "하준", "지호", "지후", "준우",
            "현우", "도현", "건우", "우진", "선우", "서진", "민재", "현준", "연우", "유준",
            "정우", "승우", "승현", "시윤", "준혁", "은우", "지훈", "유찬", "준서", "성민",
            "김철수", "이영수", "박민수", "최영호", "정성호", "강민호", "조성수", "윤대호",
            "장영수", "임철호", "한성민", "오민수", "서대호", "신철수", "권영호", "황성호",
            
            # 여성 이름들
            "서연", "하은", "민서", "지우", "서윤", "지유", "서은", "예은", "지민", "하윤",
            "윤서", "채원", "다은", "수아", "소율", "예린", "시은", "예원", "유진", "서영",
            "이영희", "김미영", "박은주", "최정희", "정미숙", "강영숙", "조미자", "윤순자",
            "장영자", "임정자", "한미경", "오순희", "서정숙", "신영자", "권미자", "황순희",
            
            # 성+이름 조합 (확실한 실명들)
            "홍길동", "김철수", "이영희", "박민수", "최영호", "정미영", "강민호", "조영수",
            "윤정희", "장철호", "임영자", "한성민", "오미자", "서대호", "신영희", "권철수",
            "황정호", "남영수", "심미영", "노철호", "정영희", "하성민", "곽민호", "성영자",
        }
        
        # 제외 단어 필터링
        self.real_names = {name for name in self.real_names if name not in NAME_EXCLUDE_WORDS}
        
        # 가명 이름 풀 (명백히 가짜임을 알 수 있는 이름들)
        self.fake_names = [
            "김가명", "이가명", "박무명", "최차명", "정익명", "강별명", "조더미", "윤예명",
            "장무기", "임시명", "한예시", "오무료", "서견본", "신표본", "권샘플", "황테스트",
            "남가짜", "심임시", "노예제", "정더미", "하시범", "곽견본", "성예시", "차시험",
            "주가상", "우임의", "구예제", "신익명", "임무기", "나예비", "전가짜", "민더미",
            "유시범", "진예제", "지임시", "엄가명", "채무기", "원예비", "천임의", "방가상",
        ]
        
        # 가명 전화번호 (순차 증가)
        self.fake_phones = [f"010-{i:04d}-0000" for i in range(10000)]
        
        # 가명 이메일
        self.fake_emails = [
            f"user{i:03d}@example.com" for i in range(1, 1001)
        ] + [
            f"test{i:03d}@test.co.kr" for i in range(1, 1001)
        ] + [
            f"demo{i:03d}@demo.net" for i in range(1, 1001)
        ]
        
        # 전국 시/도 데이터
        self.provinces = [
            "서울", "부산", "대구", "인천", "광주", "대전", "울산", "세종",
            "경기", "강원", "충북", "충남", "전북", "전남", "경북", "경남", "제주"
        ]
        
        # 전국 시 데이터
        self.cities = [
            # 경기도
            "수원시", "성남시", "고양시", "용인시", "부천시", "안산시", "안양시", "남양주시",
            "화성시", "평택시", "의정부시", "시흥시", "파주시", "광명시", "김포시", "군포시",
            "광주시", "이천시", "양주시", "오산시", "구리시", "안성시", "포천시", "의왕시",
            "하남시", "여주시", "동두천시", "과천시", "연천군", "가평군", "양평군",
            
            # 강원도
            "춘천시", "원주시", "강릉시", "동해시", "태백시", "속초시", "삼척시",
            "홍천군", "횡성군", "영월군", "평창군", "정선군", "철원군", "화천군", "양구군", "인제군", "고성군", "양양군",
            
            # 충청북도
            "청주시", "충주시", "제천시", "보은군", "옥천군", "영동군", "증평군", "진천군", "괴산군", "음성군", "단양군",
            
            # 충청남도
            "천안시", "공주시", "보령시", "아산시", "서산시", "논산시", "계룡시", "당진시",
            "금산군", "부여군", "서천군", "청양군", "홍성군", "예산군", "태안군",
            
            # 전라북도
            "전주시", "군산시", "익산시", "정읍시", "남원시", "김제시",
            "완주군", "진안군", "무주군", "장수군", "임실군", "순창군", "고창군", "부안군",
            
            # 전라남도
            "목포시", "여수시", "순천시", "나주시", "광양시",
            "담양군", "곡성군", "구례군", "고흥군", "보성군", "화순군", "장흥군", "강진군",
            "해남군", "영암군", "무안군", "함평군", "영광군", "장성군", "완도군", "진도군", "신안군",
            
            # 경상북도
            "포항시", "경주시", "김천시", "안동시", "구미시", "영주시", "영천시", "상주시", "문경시", "경산시",
            "군위군", "의성군", "청송군", "영양군", "영덕군", "청도군", "고령군", "성주군", "칠곡군", "예천군", "봉화군", "울진군", "울릉군",
            
            # 경상남도
            "창원시", "진주시", "통영시", "사천시", "김해시", "밀양시", "거제시", "양산시",
            "의령군", "함안군", "창녕군", "고성군", "남해군", "하동군", "산청군", "함양군", "거창군", "합천군",
            
            # 제주도
            "제주시", "서귀포시"
        ]
        
        # 전국 구/군 데이터
        self.districts = [
            # 서울특별시 (25개 구)
            "강남구", "강동구", "강북구", "강서구", "관악구", "광진구", "구로구", "금천구",
            "노원구", "도봉구", "동대문구", "동작구", "마포구", "서대문구", "서초구", "성동구",
            "성북구", "송파구", "양천구", "영등포구", "용산구", "은평구", "종로구", "중구", "중랑구",
            
            # 부산광역시 (16개 구/군)
            "중구", "서구", "동구", "영도구", "부산진구", "동래구", "남구", "북구",
            "해운대구", "사하구", "금정구", "강서구", "연제구", "수영구", "사상구", "기장군",
            
            # 대구광역시 (8개 구/군)
            "중구", "동구", "서구", "남구", "북구", "수성구", "달서구", "달성군",
            
            # 인천광역시 (10개 구/군)
            "중구", "동구", "미추홀구", "연수구", "남동구", "부평구", "계양구", "서구", "강화군", "옹진군",
            
            # 광주광역시 (5개 구)
            "동구", "서구", "남구", "북구", "광산구",
            
            # 대전광역시 (5개 구)
            "동구", "중구", "서구", "유성구", "대덕구",
            
            # 울산광역시 (5개 구/군)
            "중구", "남구", "동구", "북구", "울주군",
        ]
        
        # 가명 주소 (지역명만)
        self.fake_addresses = [
            "서울", "부산", "대구", "인천", "광주", "대전", "울산", "세종",
            "경기", "강원", "충북", "충남", "전북", "전남", "경북", "경남", "제주"
        ]
    
    def load_from_csv(self, name_csv_path: str = None, address_csv_path: str = None):
        """CSV 파일에서 추가 데이터 로드 (선택적)"""
        
        # 이름 CSV 로드
        if name_csv_path and os.path.exists(name_csv_path):
            try:
                with open(name_csv_path, 'r', encoding='utf-8') as f:
                    reader = csv.reader(f)
                    for row in reader:
                        if row and len(row) > 0:
                            name = row[0].strip()
                            if name and len(name) >= 2 and name not in NAME_EXCLUDE_WORDS:
                                self.real_names.add(name)
                print(f"CSV에서 이름 로드: {name_csv_path}")
            except Exception as e:
                print(f"이름 CSV 로드 실패: {e}")
        
        # 주소 CSV 로드
        if address_csv_path and os.path.exists(address_csv_path):
            try:
                import pandas as pd
                df = pd.read_csv(address_csv_path, encoding='utf-8')
                
                # 시/도 추가
                if '시도명' in df.columns:
                    provinces = df['시도명'].dropna().unique().tolist()
                    self.provinces.extend([p for p in provinces if p not in self.provinces])
                
                # 시 추가
                if '시군구명' in df.columns:
                    cities = df['시군구명'].dropna().unique().tolist()
                    self.cities.extend([c for c in cities if c not in self.cities])
                
                print(f"CSV에서 주소 로드: {address_csv_path}")
            except Exception as e:
                print(f"주소 CSV 로드 실패: {e}")

# ===== 전역 데이터풀 인스턴스 =====
_global_pools = None

def get_pools() -> DataPools:
    """전역 데이터풀 인스턴스 반환"""
    global _global_pools
    if _global_pools is None:
        _global_pools = DataPools()
        
        # CSV 파일이 있으면 로드
        _global_pools.load_from_csv("name.csv", "address_road.csv")
    
    return _global_pools

def initialize_pools():
    """데이터풀 초기화 (강제 재로드)"""
    global _global_pools
    _global_pools = None
    return get_pools()

def reload_pools():
    """데이터풀 재로드"""
    return initialize_pools()