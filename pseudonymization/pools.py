# pseudonymization/pools.py
"""
데이터풀 관리 모듈 (수정된 버전)
- 확장된 제외 단어 리스트
- 정리된 실명 목록
- 더 엄격한 필터링
"""

import os
import csv
from typing import Set, List, Dict, Any

# 복합 성씨 (2글자)
COMPOUND_SURNAMES = {
    '남궁', '독고', '동방', '망절', '사공', '서문', '선우', '소봉', '어금',
    '장곡', '제갈', '황보', '사마', '여남', '철수', '복야', '강전'
}

# 단일 성씨 (1글자)
SINGLE_SURNAMES = {
    '김', '이', '박', '최', '정', '강', '조', '윤', '장', '임', '한', '오', '서', '신',
    '권', '황', '안', '송', '류', '전', '홍', '고', '문', '양', '손', '배', '조', '백',
    '허', '유', '남', '심', '노', '정', '하', '곽', '성', '차', '주', '우', '구', '신',
    '임', '나', '전', '민', '유', '진', '지', '엄', '채', '원', '천', '방', '공', '강',
    '현', '함', '변', '염', '양', '변', '여', '추', '노', '도', '소', '석', '선', '설',
    '마', '길', '연', '위', '표', '명', '기', '반', '왕', '금', '옥', '육', '인', '맹',
    '제', '모', '장', '남', '탁', '국', '여', '진', '어', '은', '편', '곡', '변', '승',
    '가', '경', '간', '갈', '강', '견', '경', '곡', '곽', '교', '구', '국', '군', '궁',
    '권', '근', '금', '기', '길', '김', '나', '남', '내', '노', '뇌', '단', '당', '대',
    '도', '독', '돈', '두', '류', '마', '만', '명', '모', '목', '문', '미', '민', '박',
    '반', '방', '배', '백', '변', '보', '복', '봉', '부', '비', '빈', '사', '산', '삼',
    '상', '서', '석', '선', '설', '섭', '성', '소', '손', '송', '수', '순', '승', '시',
    '신', '심', '안', '애', '양', '어', '엄', '여', '연', '염', '영', '예', '오', '옥',
    '온', '왕', '요', '용', '우', '운', '원', '위', '유', '윤', '은', '이', '인', '임',
    '자', '장', '전', '정', '제', '조', '종', '주', '지', '진', '차', '창', '채', '천',
    '최', '추', '탁', '태', '판', '편', '평', '하', '학', '한', '함', '해', '허', '현',
    '형', '호', '홍', '화', '환', '황', '후', '흥'
}

# 대폭 확장된 제외 단어 리스트
NAME_EXCLUDE_WORDS = {
    # 문법 요소들
    '이름은', '이름이', '이름을', '이름과', '이름만', '이름도', '이름에', '이름으로',
    '이고', '이며', '이다', '입니다', '했습니다', '있습니다', '없습니다', '됩니다',
    '했어요', '해요', '가요', '와요', '나요', '이에요', '예요', '이야', '야',
    '에서', '에게', '으로', '로', '와', '과', '이', '가', '을', '를', '은', '는',
    '의', '도', '만', '부터', '까지', '마저', '조차', '밖에', '뿐', '처럼', '같이',
    
    # 지역명들
    '서울', '부산', '대구', '인천', '광주', '대전', '울산', '세종', '경기', '강원',
    '충북', '충남', '전북', '전남', '경북', '경남', '제주',
    '강남', '강북', '강서', '강동', '서초', '송파', '마포', '용산', '종로', '중구',
    '동구', '서구', '남구', '북구', '영등포', '관악', '성북', '동대문', '노원',
    '은평', '서대문', '금천', '구로', '도봉', '동작', '성동', '중랑', '양천',
    '수원', '성남', '안양', '부천', '안산', '용인', '평택', '시흥', '김포', '광명',
    '군포', '하남', '오산', '이천', '안성', '의왕', '양평', '여주', '과천',
    
    # 일반 명사들
    '사람', '학생', '선생', '선생님', '의사', '간호사', '교사', '회사원', '직장인',
    '회사', '학교', '병원', '은행', '우체국', '경찰서', '소방서', '시청', '구청',
    '음식', '요리', '밥', '물', '차', '커피', '책', '신문', '컴퓨터', '핸드폰',
    '자동차', '버스', '지하철', '기차', '비행기', '집', '아파트', '빌딩', '건물',
    '나무', '꽃', '풀', '바다', '강', '산', '하늘', '구름', '별', '달', '해',
    '불', '바람', '눈', '비', '번개', '천둥', '지진', '태풍',
    
    # 시간 관련
    '오늘', '내일', '어제', '모레', '글피', '이번', '다음', '지난', '올해', '내년',
    '작년', '이달', '다음달', '지난달', '이주', '다음주', '지난주',
    '월요일', '화요일', '수요일', '목요일', '금요일', '토요일', '일요일',
    '아침', '점심', '저녁', '밤', '새벽', '오전', '오후', '정오', '자정',
    
    # 감정/형용사
    '좋은', '나쁜', '예쁜', '못생긴', '큰', '작은', '높은', '낮은', '빠른', '느린',
    '새로운', '오래된', '깨끗한', '더러운', '밝은', '어두운', '따뜻한', '차가운',
    '뜨거운', '시원한', '달콤한', '쓴', '짠', '매운', '신', '고소한',
    
    # 동작/동사
    '가다', '오다', '보다', '듣다', '말하다', '먹다', '마시다', '자다', '일어나다',
    '앉다', '서다', '걷다', '뛰다', '읽다', '쓰다', '그리다', '노래하다', '춤추다',
    '웃다', '울다', '생각하다', '공부하다', '일하다', '놀다', '쉬다',
    '만들다', '부수다', '열다', '닫다', '켜다', '끄다', '찾다', '잃다', '주다', '받다',
    
    # 질문사/지시사
    '누구', '무엇', '언제', '어디', '어떻게', '왜', '어느', '몇', '얼마',
    '이것', '그것', '저것', '여기', '거기', '저기', '이런', '그런', '저런',
    '이렇게', '그렇게', '저렇게', '같은', '다른', '어떤', '모든', '각각',
    
    # 수량/단위
    '하나', '둘', '셋', '넷', '다섯', '여섯', '일곱', '여덟', '아홉', '열',
    '개', '명', '마리', '대', '권', '장', '병', '잔', '그릇', '접시',
    '킬로', '그램', '리터', '미터', '센티', '인치', '시간', '분', '초',
    
    # 가족 관계
    '아버지', '어머니', '아빠', '엄마', '할아버지', '할머니', '형', '누나', '언니', '오빠',
    '동생', '남동생', '여동생', '아들', '딸', '남편', '아내', '부인', '신랑', '신부',
    '삼촌', '이모', '고모', '외삼촌', '큰아버지', '작은아버지', '큰어머니', '작은어머니',
    
    # 직업
    '회사원', '공무원', '선생님', '의사', '간호사', '변호사', '판사', '검사', '경찰',
    '소방관', '군인', '기자', '작가', '화가', '가수', '배우', '요리사', '운전사',
    '농부', '어부', '목수', '전기기사', '엔지니어', '프로그래머', '디자이너',
    
    # 학교 관련
    '유치원', '초등학교', '중학교', '고등학교', '대학교', '대학원', '학과', '전공',
    '수업', '시험', '숙제', '방학', '학기', '성적', '졸업', '입학', '전학',
    
    # 색깔
    '빨간', '파란', '노란', '초록', '검은', '하얀', '회색', '분홍', '보라', '주황',
    '갈색', '금색', '은색', '무지개', '투명한',
    
    # 음식
    '밥', '빵', '국수', '라면', '우동', '냉면', '김치', '불고기', '갈비', '삼겹살',
    '치킨', '피자', '햄버거', '샐러드', '과일', '사과', '배', '바나나', '포도',
    '딸기', '수박', '참외', '복숭아', '귤', '오렌지',
    
    # 문법적으로 이름이 될 수 없는 패턴들
    '그런데', '하지만', '그래서', '따라서', '그러나', '또한', '그리고', '또는',
    '만약', '만일', '혹시', '아마', '정말', '진짜', '거짓', '가짜',
    '아직', '벌써', '이미', '곧', '즉시', '바로', '천천히', '빨리', '매우', '조금',
    
    # 인터넷/통신 관련
    '인터넷', '이메일', '전화', '문자', '카톡', '메신저', '블로그', '홈페이지',
    '웹사이트', '유튜브', '페이스북', '인스타그램', '트위터',
    
    # 기타 제외할 단어들
    '안녕', '고마워', '미안', '죄송', '반가워', '잘가', '안녕히', '수고',
    '화이팅', '파이팅', '괜찮아', '됐어', '알았어', '몰라', '글쎄',
    '정말로', '사실', '거짓말', '농담', '진심', '장난', '재미', '시간',
    '거주하시', '분이시', '으로', '메일', '보내드렸', '보내드린', '보내서',
    '연락처', '연락', '문의사항', '문의', '질문', '답변', '확인', '예약',
    '고객님', '손님', '선생님', '님', '씨', '양', '군'
}

class DataPools:
    """데이터풀 클래스"""
    
    def __init__(self):
        self._initialized = False
        self.real_names = set()  # CSV에서 로드된 실명들
        self.real_addresses = set()
        self.road_names = set()
        self.companies = set()
        
        # 지역 데이터
        self.provinces = {'서울', '부산', '대구', '인천', '광주', '대전', '울산', '세종'}
        self.cities = {
            '서울시', '부산시', '대구시', '인천시', '광주시', '대전시', '울산시', '세종시',
            '수원시', '성남시', '안양시', '부천시', '안산시', '용인시', '평택시', '시흥시'
        }
        self.districts = {
            '강남구', '강북구', '강서구', '강동구', '서초구', '송파구', '마포구', '용산구',
            '종로구', '중구', '동구', '서구', '남구', '북구', '영등포구', '관악구',
            '성북구', '동대문구', '노원구', '은평구', '서대문구', '금천구', '구로구',
            '도봉구', '동작구', '성동구', '중랑구', '양천구', '해운대구', '부산진구',
            '동래구', '남구', '중구', '수성구', '달서구', '달성군'
        }
        
        # 가명 풀 (치환용)
        self.fake_names = self._generate_fake_names()
        self.fake_phones = self._generate_fake_phones()
        self.fake_addresses = self._generate_fake_addresses()
        
        # 성씨 데이터
        self.compound_surnames = COMPOUND_SURNAMES
        self.single_surnames = SINGLE_SURNAMES
        
        # 제외 단어 리스트
        self.name_exclude_words = NAME_EXCLUDE_WORDS
        
        # 기본 실명 목록 (필터링됨)
        self._load_basic_names()
    
    def _load_basic_names(self):
        """기본 실명 목록 로드 (적절한 필터링 적용)"""
        basic_names = {
            # 남자 이름들 (일반적이고 확실한 이름들)
            '민준', '서준', '도윤', '예준', '시우', '주원', '하준', '지호', '지후', '준우',
            '현우', '준서', '도현', '지훈', '건우', '우진', '선우', '민재', '현준', '유준',
            '서진', '연우', '은우', '정우', '시윤', '준혁', '승현', '이준', '승우', '승민',
            '지환', '민성', '윤우', '준영', '수호', '수현', '동현', '진우', '유찬',
            '시후', '지원', '이안', '성민', '지안', '민규', '재원', '재윤', '성현', '시현',
            '준호', '지한', '태윤', '로운', '재민', '민우', '재현', '태현', '정민', '민찬',
            '시원', '한결', '윤호', '시온', '우주', '민석', '서우', '은찬', '성준', '승준',
            '우빈', '지민', '정현', '도하', '이든', '현서', '현수', '민수', '민호', '윤성',
            
            # 여자 이름들 (일반적이고 확실한 이름들)
            '서윤', '지우', '서현', '하은', '예은', '윤서', '지민', '채원', '하윤', '지유',
            '수아', '예린', '예원', '시은', '소은', '나은', '가은', '다은', '하린', '채은',
            '수빈', '수연', '예나', '유나', '민서', '서연', '지은', '예서', '서영', '하영',
            '지안', '수진', '예지', '다인', '유진', '소연', '서은', '유리', '하늘', '가연',
            '서진', '민지', '예빈', '서하', '지아', '가영', '다연', '수민', '예진', '현서',
            '다현', '서안', '예림', '채린', '수현', '민경', '하율', '예솔', '소율', '하람',
            
            # 성+이름 조합 (확실한 것들)
            '김민준', '이서준', '박도윤', '최예준', '정시우', '강주원', '조하준', '윤지호',
            '장지후', '임준우', '한현우', '오준서', '서도현', '신지훈', '권건우', '황우진',
            '안선우', '송민재', '류현준', '전유준', '홍서진', '고연우', '문은우', '양정우',
            '김서윤', '이지우', '박서현', '최하은', '정예은', '강윤서', '조지민', '윤채원',
            '장하윤', '임지유', '한수아', '오예린', '서예원', '신시은', '권소은', '황나은',
            '안가은', '송다은', '류하린', '전채은', '홍수빈', '고수연', '문예나', '양유나',
            '김홍길', '이홍길', '박홍길', '최홍길', '정홍길', '강홍길', '조홍길', '윤홍길',
            '홍길동', '김철수', '이영희', '박민수', '최수영', '정미영', '강영수', '조민호',
            
            # 추가 실명들 (name.csv에서 자주 나오는 것들)
            '홍길', '김철', '이영', '박민', '최수', '정미', '강영', '조민', '윤수', '장영',
            '임민', '한수', '오영', '서민', '신수', '권영', '황민', '안수', '송영', '류민'
        }
        
        # 제외 단어에 있는 것들만 제거 (너무 엄격하지 않게)
        filtered_names = set()
        for name in basic_names:
            if name not in self.name_exclude_words:
                filtered_names.add(name)
        
        self.real_names = filtered_names
        print(f"기본 실명 목록 로드: {len(filtered_names)}개 (적절한 필터링 후)")
    
    def _generate_fake_names(self) -> List[str]:
        """가명 이름 생성 (김가명, 이가명 형태)"""
        fake_names = []
        surnames = ['김', '이', '박', '최', '정', '강', '조', '윤', '장', '임', '한', '오', '서', '신']
        fake_words = ['가명', '익명', '무명', '별명', '차명', '임명', '성명', '호명', '칭명', '지명']
        
        for surname in surnames:
            for fake_word in fake_words:
                fake_names.append(surname + fake_word)
        
        return fake_names
    
    def _generate_fake_phones(self) -> List[str]:
        """가짜 전화번호 생성 (010-0000-0000부터 1씩 증가)"""
        fake_phones = []
        for i in range(10000):  # 0000~9999
            fake_phones.append(f"010-{i:04d}-0000")
        return fake_phones
    
    def _generate_fake_addresses(self) -> List[str]:
        """가짜 주소 생성 (시/도만)"""
        return ['서울시', '부산시', '대구시', '인천시', '광주시', '대전시', '울산시', '경기도', '강원도', '충북도']
    
    def _is_invalid_name(self, name: str) -> bool:
        """이름으로 부적절한 단어인지 확인"""
        # 숫자가 포함된 경우
        if any(char.isdigit() for char in name):
            return True
        
        # 특수문자가 포함된 경우
        if not name.replace(' ', '').isalpha():
            return True
        
        # 1글자이면서 성씨가 아닌 경우
        if len(name) == 1 and name not in self.single_surnames:
            return True
        
        # 같은 글자 반복 (예: "가가", "나나나")
        if len(name) >= 2 and len(set(name)) == 1:
            return True
        
        # 명사로 끝나는 경우들
        noun_endings = ['시장', '의원', '사장', '부장', '과장', '팀장', '회장', '병원', '학교', '회사']
        for ending in noun_endings:
            if name.endswith(ending):
                return True
        
        return False
    
    def load_names_from_csv(self, csv_path: str):
        """CSV에서 이름 로드 (필터링 적용)"""
        if not os.path.exists(csv_path):
            print(f"CSV 파일 없음: {csv_path}")
            return
        
        try:
            loaded_names = set()
            with open(csv_path, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    name = row.get('이름', '').strip()
                    if name and len(name) >= 2:
                        # 필터링 적용
                        if (name not in self.name_exclude_words and 
                            not self._is_invalid_name(name) and
                            len(name) <= 4):  # 4글자 이하만
                            loaded_names.add(name)
            
            # 기존 이름과 합치기
            self.real_names.update(loaded_names)
            print(f"CSV에서 {len(loaded_names)}개 이름 로드 (필터링 후)")
            
        except Exception as e:
            print(f"CSV 로드 실패 {csv_path}: {e}")
    
    def load_addresses_from_csv(self, csv_path: str):
        """CSV에서 주소 로드"""
        if not os.path.exists(csv_path):
            print(f"주소 CSV 파일 없음: {csv_path}")
            return
        
        try:
            with open(csv_path, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    address = row.get('주소', '').strip()
                    if address:
                        self.real_addresses.add(address)
            
            print(f"주소 CSV에서 {len(self.real_addresses)}개 주소 로드")
            
        except Exception as e:
            print(f"주소 CSV 로드 실패 {csv_path}: {e}")
    
    def initialize(self, custom_data: Dict = None):
        """데이터풀 초기화"""
        if self._initialized:
            return
        
        print("📦 데이터풀 초기화 중...")
        
        # CSV 파일에서 데이터 로드
        self.load_names_from_csv('name.csv')
        self.load_addresses_from_csv('address_road.csv')
        
        # 커스텀 데이터 추가
        if custom_data:
            if 'names' in custom_data:
                filtered_custom_names = set()
                for name in custom_data['names']:
                    if (name not in self.name_exclude_words and 
                        not self._is_invalid_name(name)):
                        filtered_custom_names.add(name)
                self.real_names.update(filtered_custom_names)
                print(f"커스텀 이름 {len(filtered_custom_names)}개 추가")
        
        self._initialized = True
        
        print(f"📦 데이터풀 초기화 완료:")
        print(f"  - 실명: {len(self.real_names)}개")
        print(f"  - 주소: {len(self.real_addresses)}개")
        print(f"  - 제외단어: {len(self.name_exclude_words)}개")
        print(f"  - 성씨: 단일 {len(self.single_surnames)}개, 복합 {len(self.compound_surnames)}개")

# 전역 인스턴스
_pools_instance = None

def get_pools() -> DataPools:
    """DataPools 싱글톤 인스턴스 반환"""
    global _pools_instance
    if _pools_instance is None:
        _pools_instance = DataPools()
    return _pools_instance

def initialize_pools(custom_data: Dict = None):
    """데이터풀 초기화"""
    pools = get_pools()
    pools.initialize(custom_data)

def reload_pools():
    """데이터풀 재로드"""
    global _pools_instance
    _pools_instance = None
    initialize_pools()